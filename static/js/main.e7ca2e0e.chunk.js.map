{"version":3,"sources":["utils/mapSettings.js","components/Map.jsx","components/Button.jsx","components/Navbar.jsx","components/Container.jsx","App.jsx","index.jsx"],"names":["mapSettings","accessToken","mapInitialState","latitude","longitude","zoom","bearing","pitch","geolocateControl","style","top","right","margin","showAccuracyCircle","positionOptions","enableHighAccuracy","fitBoundsOptions","maxZoom","navigationControl","showCompass","layer","zonesFadeInStyle","id","source","type","paint","zonesStrokesStyles","directionsStyles","layout","Map","props","viewport","setViewport","markersToRender","zonesToRender","setUserPosition","setLocationEnabled","directionToTheCar","width","height","mapStyle","onViewStateChange","nextViewport","mapboxApiAccessToken","trackUserLocation","onViewportChange","onGeolocate","coordObj","coords","Button","clickHandler","text","locationEnabled","useState","isShown","setIsShown","buttonClasses","onMouseEnter","onMouseLeave","className","onClick","disabled","Navbar","findNearestCar","src","alt","Container","children","defaultProps","isDisabled","App","backToWelly","useCallback","transitionInterpolator","FlyToInterpolator","speed","transitionDuration","setZonesToRender","setZonesError","setMarkerError","fetchedMarkersData","setFetchedMarkersData","setMarkersToRender","userPosition","SetDirectionToTheCar","useEffect","fetch","then","res","json","resultData","data","errorData","map","mevoMarker","Number","position","offsetTop","iconUrl","mevoMarkersPositions","el","push","point","nearestMevoCarObj","nearestPoint","featureCollection","nearestMarker","find","geometry","coordinates","url","convertToGeoJson","polyline","routes","first","last","length","console","log","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e7ca2e0e.chunk.js","sourcesContent":["const mapSettings = {\n  accessToken:\n    'pk.eyJ1IjoibWl0cmk0NSIsImEiOiJja2tqMjJ3djYwcXdpMnZxa3QydWVsYWh6In0.bS8T8wGM8SJCmouWHcJ1fA',\n  mapInitialState: {\n    latitude: -41.292757,\n    longitude: 174.790984,\n    zoom: 12,\n    bearing: 0,\n    pitch: 0,\n  },\n  geolocateControl: {\n    style: {\n      top: 80,\n      right: 10,\n      margin: 15,\n    },\n    showAccuracyCircle: false,\n    positionOptions: {\n      enableHighAccuracy: true,\n    },\n    fitBoundsOptions: { maxZoom: 15 },\n  },\n  navigationControl: {\n    showCompass: false,\n    style: {\n      top: 0,\n      right: 10,\n      margin: 15,\n    },\n  },\n  layer: {\n    zonesFadeInStyle: {\n      id: 'mevoZonesFadeIn',\n      source: 'geoDataSource',\n      type: 'fill',\n      paint: {\n        'fill-color': '#5B5F61',\n        'fill-outline-color': '#f7590d',\n        'fill-opacity': 0.3,\n      },\n    },\n    zonesStrokesStyles: {\n      id: 'mevoZonesStrokes',\n      source: 'geoDataSource',\n      type: 'line',\n      paint: {\n        'line-color': '#f7590d',\n        'line-width': 3,\n      },\n    },\n    directionsStyles: {\n      id: 'directionJson',\n      source: 'directionJson',\n      type: 'line',\n      layout: {\n        'line-join': 'round',\n        'line-cap': 'round',\n      },\n      paint: {\n        'line-color': '#BF93E4',\n        'line-width': 5,\n      },\n    },\n  },\n};\n\nexport default mapSettings;\n","/* eslint-disable react/jsx-props-no-spreading */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport MapGL, { GeolocateControl, NavigationControl } from 'react-map-gl';\n// import * as MapboxDirections from '@mapbox/mapbox-gl-directions/src/index';\nimport mapSettings from '../utils/mapSettings';\nexport default function Map(props) {\n  // eslint-disable-next-line object-curly-newline\n  const {\n    viewport,\n    setViewport,\n    markersToRender,\n    zonesToRender,\n    setUserPosition,\n    setLocationEnabled,\n    directionToTheCar,\n  } = props;\n  // const directions = new MapboxDirections({\n  //   accessToken: mapSettings.accessToken,\n  //   unit: 'metric',\n  //   profile: 'mapbox/walking',\n  // });\n\n  return (\n    <MapGL\n      {...viewport}\n      width='100%'\n      height='100%'\n      mapStyle='mapbox://styles/mapbox/streets-v9'\n      onViewStateChange={(nextViewport) => setViewport(nextViewport)}\n      mapboxApiAccessToken={mapSettings.accessToken}\n      // addControl={directions}\n    >\n      {zonesToRender}\n      {markersToRender}\n      {directionToTheCar}\n\n      <NavigationControl {...mapSettings.navigationControl} />\n      <GeolocateControl\n        {...mapSettings.geolocateControl}\n        trackUserLocation\n        onViewportChange={() => {\n          setViewport({ ...viewport, zoom: 12 });\n        }}\n        onGeolocate={(coordObj) => {\n          setUserPosition([\n            coordObj.coords.longitude,\n            coordObj.coords.latitude,\n          ]);\n          setLocationEnabled(true);\n        }}\n      />\n    </MapGL>\n  );\n}\n\nMap.propTypes = {\n  // eslint-disable-next-line react/forbid-prop-types\n  viewport: PropTypes.object.isRequired,\n  setViewport: PropTypes.func.isRequired,\n  zonesToRender: PropTypes.object,\n  markersToRender: PropTypes.array,\n  setUserPosition: PropTypes.func,\n  setLocationEnabled: PropTypes.func,\n  directionToTheCar: PropTypes.object,\n};\n\nMap.defaultProps = {\n  setUserPosition: '',\n  zonesToRender: {} || [],\n  markersToRender: [] || {},\n  setLocationEnabled: '',\n  directionToTheCar: {} || [],\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function Button(props) {\n  const { clickHandler, text, locationEnabled } = props;\n  const [isShown, setIsShown] = useState(false);\n\n  const buttonClasses = `${\n    locationEnabled ? 'cursor-pointer' : 'cursor-not-allowed'\n  } relative inline-block px-6 py-2 text-base font-medium leading-6 text-center text-white uppercase transition shadow ripple hover:shadow-lg hover:bg-blue-800 focus:outline-none`;\n\n  return (\n    <div\n      onMouseEnter={() => setIsShown(!isShown)}\n      onMouseLeave={() => setIsShown(!isShown)}\n    >\n      <button\n        type='button'\n        className={buttonClasses}\n        onClick={clickHandler}\n        disabled={!locationEnabled}\n      >\n        {text}\n      </button>\n      {!locationEnabled && isShown && (\n        <span className='bg-yellow-300 border-r border-opacity-50 border-yellow-600 rounded-md shadow-md text-white w-auto h-auto absolute top-10 right-20 z-10 p-2'>\n          GeoLocation should be enabled\n        </span>\n      )}\n    </div>\n  );\n}\n\nButton.propTypes = {\n  clickHandler: PropTypes.func.isRequired,\n  text: PropTypes.string.isRequired,\n  isDisabled: PropTypes.bool,\n  locationEnabled: PropTypes.bool,\n};\n\nButton.defaultProps = { isDisabled: true, locationEnabled: false };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from './Button';\n\nexport default function Navbar(props) {\n  const { findNearestCar, locationEnabled } = props;\n\n  return (\n    <nav className='bg-mevo-main flex justify-between'>\n      <img\n        className='w-auto h-10 flex-grow-0 flex-shrink-0'\n        src='https://assets.mevo.co.nz/brand/logo-light.svg'\n        alt='Mevo Logo'\n      />\n      <div className='flex justify-end flex-grow'>\n        <Button\n          text='Find nearest car'\n          locationEnabled={locationEnabled}\n          clickHandler={findNearestCar}\n        />\n        {/* <Button text='Back to Welly' clickHandler={backToWelly} /> */}\n      </div>\n    </nav>\n  );\n}\n\nNavbar.propTypes = {\n  backToWelly: PropTypes.func.isRequired,\n  findNearestCar: PropTypes.func.isRequired,\n  locationEnabled: PropTypes.bool,\n};\n\nNavbar.defaultProps = { locationEnabled: false };\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function Container({ children }) {\n  return <div className='h-screen flex flex-col font-body'>{children}</div>;\n}\n\nContainer.propTypes = {\n  // eslint-disable-next-line react/require-default-props\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.element),\n    PropTypes.element.isRequired,\n  ]),\n};\n","/* eslint-disable react/jsx-props-no-spreading */\nimport React, { useState, useEffect, useCallback } from 'react';\n\nimport { FlyToInterpolator, Marker, Source, Layer } from 'react-map-gl';\nimport { nearestPoint, point, featureCollection } from '@turf/turf';\nimport * as polyline from '@mapbox/polyline';\nimport mapSettings from './utils/mapSettings';\nimport Map from './components/Map';\nimport Navbar from './components/Navbar';\nimport Container from './components/Container';\n\nfunction App() {\n  const [viewport, setViewport] = useState({ ...mapSettings.mapInitialState });\n\n  const backToWelly = useCallback(() => {\n    setViewport({\n      ...viewport,\n      longitude: 174.790984,\n      latitude: -41.292757,\n      zoom: 12,\n      transitionInterpolator: new FlyToInterpolator({ speed: 1.2 }),\n      transitionDuration: 'auto',\n    });\n  }, [viewport]);\n\n  const [zonesToRender, setZonesToRender] = useState([]);\n  // eslint-disable-next-line no-unused-vars\n  const [zonesError, setZonesError] = useState(null);\n  // eslint-disable-next-line no-unused-vars\n  const [markerError, setMarkerError] = useState(null);\n  const [fetchedMarkersData, setFetchedMarkersData] = useState([]);\n  const [markersToRender, setMarkersToRender] = useState([]);\n  const [userPosition, setUserPosition] = useState([]);\n  const [locationEnabled, setLocationEnabled] = useState(false);\n  const [directionToTheCar, SetDirectionToTheCar] = useState([]);\n\n  useEffect(() => {\n    const fetchData = () => {\n      fetch('https://api.mevo.co.nz/public/home-zones/all')\n        .then((res) => res.json())\n        .then(\n          (resultData) => {\n            setZonesToRender(\n              <Source type='geojson' data={resultData.data} id='geoDataSource'>\n                <Layer {...mapSettings.layer.zonesFadeInStyle} />\n                <Layer {...mapSettings.layer.zonesStrokesStyles} />\n              </Source>,\n            );\n          },\n          (errorData) => {\n            setZonesError(errorData);\n            // TODO: Error handling\n          },\n        );\n    };\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    const fetchData = () => {\n      fetch('https://api.mevo.co.nz/public/vehicles/all')\n        .then((res) => res.json())\n        .then(\n          (resultData) => {\n            setFetchedMarkersData(resultData);\n            setMarkersToRender(\n              resultData.map((mevoMarker) => (\n                <Marker\n                  key={\n                    mevoMarker.position.longitude + mevoMarker.position.latitude\n                  }\n                  longitude={Number(mevoMarker.position.longitude)}\n                  latitude={Number(mevoMarker.position.latitude)}\n                  offsetTop={-44}\n                >\n                  <img\n                    src={mevoMarker.iconUrl}\n                    alt='Mevo car position'\n                    className='w-8 h-auto'\n                  />\n                </Marker>\n              )),\n            );\n          },\n          (errorData) => {\n            // TODO: Error handling\n            setMarkerError(errorData);\n          },\n        );\n    };\n    fetchData();\n  }, []);\n\n  const findNearestCar = () => {\n    const mevoMarkersPositions = [];\n    fetchedMarkersData.map((el) =>\n      mevoMarkersPositions.push(\n        point([Number(el.position.longitude), Number(el.position.latitude)]),\n      ),\n    );\n    const nearestMevoCarObj = nearestPoint(\n      point(userPosition),\n      featureCollection(mevoMarkersPositions),\n    );\n    const nearestMarker = fetchedMarkersData.find(\n      (el) =>\n        el.position.longitude == nearestMevoCarObj.geometry.coordinates[0] &&\n        el.position.latitude == nearestMevoCarObj.geometry.coordinates[1],\n    );\n    if (nearestMarker) {\n      setMarkersToRender(\n        <Marker\n          longitude={Number(nearestMarker.position.longitude)}\n          latitude={Number(nearestMarker.position.latitude)}\n          offsetTop={-44}\n        >\n          <img\n            src={nearestMarker.iconUrl}\n            alt='Nearest Mevo car position'\n            className='animate-car-found w-10 h-auto '\n          />\n        </Marker>,\n      );\n      const url = `https://api.mapbox.com/directions/v5/mapbox/walking/${userPosition};${nearestMevoCarObj.geometry.coordinates}?access_token=${mapSettings.accessToken}`;\n      fetch(url)\n        .then((res) => res.json())\n        .then(\n          (resultData) => {\n            const convertToGeoJson = polyline.toGeoJSON(\n              resultData.routes[0].geometry,\n            );\n            SetDirectionToTheCar(\n              <Source type='geojson' data={convertToGeoJson} id='directionJson'>\n                <Layer {...mapSettings.layer.directionsStyles} />\n              </Source>,\n            );\n            const first = convertToGeoJson.coordinates[0];\n            const last =\n              convertToGeoJson.coordinates[\n                convertToGeoJson.coordinates.length - 1\n              ];\n            console.log(convertToGeoJson);\n            console.log(first);\n            console.log(last);\n\n            // prettier-ignore\n            // const { longitude, latitude } = new WebMercatorViewport(viewport).fitBounds([first, last]);\n            // console.log(longitude, latitude);\n            // setViewport({\n            //   ...viewport,\n            //   viewState: {\n            //     longitude,\n            //     latitude,\n            //     transitionInterpolator: new FlyToInterpolator(),\n            //     transitionDuration: 'auto',\n            //   },\n            // });\n          },\n          (errorData) => {\n            // TODO: Error handling\n            console.log(errorData);\n          },\n        );\n    }\n  };\n\n  return (\n    <div className='App'>\n      <Container>\n        <Navbar\n          locationEnabled={locationEnabled}\n          backToWelly={backToWelly}\n          findNearestCar={findNearestCar}\n        />\n        <Map\n          viewport={viewport}\n          setViewport={setViewport}\n          userPosition={userPosition}\n          setUserPosition={setUserPosition}\n          setLocationEnabled={setLocationEnabled}\n          zonesToRender={zonesToRender}\n          markersToRender={markersToRender}\n          directionToTheCar={directionToTheCar}\n        />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}