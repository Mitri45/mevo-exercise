{"version":3,"sources":["components/Navbar.jsx","components/Container.jsx","utils/mapSettings.js","App.jsx","index.jsx"],"names":["Navbar","className","src","alt","Container","children","mapSettings","geolocateControl","style","top","right","margin","showAccuracyCircle","positionOptions","enableHighAccuracy","fitBoundsOptions","maxZoom","navigationControl","showCompass","layer","zonesFadeInStyle","id","source","type","paint","zonesStrokesStyles","App","useState","latitude","longitude","zoom","bearing","pitch","viewport","setViewport","zonesToRender","setZonesToRender","zonesError","setZonesError","useEffect","fetch","then","res","json","resultData","data","errorData","markersIsLoaded","setMarkersIsLoaded","markerError","setMarkerError","mapMarkersData","setMapMarkersData","markersToRender","setMarkersToRender","useMemo","map","mevoMarker","Number","position","iconUrl","minZoom","width","height","mapStyle","onViewportChange","mapboxApiAccessToken","trackUserLocation","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e21a25fc.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function Navbar() {\n  //   const backToWelly = () => {\n  //     setViewport({\n  //       ...viewport,\n  //       longitude: 174.790984,\n  //       latitude: -41.292757,\n  //       zoom: 12,\n  //       transitionDuration: 8000,\n  //       transitionInterpolator: new FlyToInterpolator(),\n  //     });\n  //   };\n\n  return (\n    <nav className='bg-mevo-main'>\n      <img\n        className='w-auto h-10'\n        src='https://assets.mevo.co.nz/brand/logo-light.svg'\n        alt='Mevo Logo'\n      />\n    </nav>\n  );\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function Container({ children }) {\n  return <div className='h-screen flex flex-col'>{children}</div>;\n}\n\nContainer.propTypes = {\n  // eslint-disable-next-line react/require-default-props\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.element),\n    PropTypes.element.isRequired,\n  ]),\n};\n","const mapSettings = {\n  geolocateControl: {\n    style: {\n      top: 80,\n      right: 0,\n      margin: 15,\n    },\n    showAccuracyCircle: false,\n    positionOptions: {\n      enableHighAccuracy: true,\n    },\n    fitBoundsOptions: { maxZoom: 25 },\n  },\n  navigationControl: {\n    showCompass: false,\n    style: {\n      top: 0,\n      right: 0,\n      margin: 15,\n    },\n  },\n  layer: {\n    zonesFadeInStyle: {\n      id: 'mevoZonesFadeIn',\n      source: 'geoDataSource',\n      type: 'fill',\n      paint: {\n        'fill-color': '#678191',\n        'fill-outline-color': '#f7590d',\n        'fill-opacity': 0.3,\n      },\n    },\n    zonesStrokesStyles: {\n      id: 'mevoZonesStrokes',\n      source: 'geoDataSource',\n      type: 'line',\n      paint: {\n        'line-color': '#f7590d',\n        'line-width': 3,\n      },\n    },\n  },\n};\n\nexport default mapSettings;\n","/* eslint-disable react/jsx-props-no-spreading */\nimport React, { useState, useEffect, useMemo } from 'react';\nimport ReactMapGL, {\n  GeolocateControl,\n  NavigationControl,\n  Marker,\n  Source,\n  Layer,\n} from 'react-map-gl';\nimport Navbar from './components/Navbar';\nimport Container from './components/Container';\nimport mapSettings from './utils/mapSettings';\n\nconst MAPBOX_TOKEN =\n  'pk.eyJ1IjoibWl0cmk0NSIsImEiOiJja2tqMjJ3djYwcXdpMnZxa3QydWVsYWh6In0.bS8T8wGM8SJCmouWHcJ1fA';\n\nfunction App() {\n  const [viewport, setViewport] = useState({\n    latitude: -41.292757,\n    longitude: 174.790984,\n    zoom: 12,\n    bearing: 0,\n    pitch: 0,\n  });\n  const [zonesToRender, setZonesToRender] = useState([]);\n  const [zonesError, setZonesError] = useState(null);\n\n  useEffect(() => {\n    fetch('https://api.mevo.co.nz/public/home-zones/all')\n      .then((res) => res.json())\n      .then(\n        (resultData) => {\n          setZonesToRender(\n            <Source type='geojson' data={resultData.data} id='geoDataSource'>\n              <Layer {...mapSettings.layer.zonesFadeInStyle} />\n              <Layer {...mapSettings.layer.zonesStrokesStyles} />\n            </Source>,\n          );\n        },\n        (errorData) => {\n          setZonesError(errorData);\n          // TODO: Error handling\n        },\n      );\n  }, [zonesError]);\n\n  const [markersIsLoaded, setMarkersIsLoaded] = useState(false);\n  const [markerError, setMarkerError] = useState(null);\n  const [mapMarkersData, setMapMarkersData] = useState([]);\n  const [markersToRender, setMarkersToRender] = useState([]);\n  useEffect(() => {\n    fetch('https://api.mevo.co.nz/public/vehicles/all')\n      .then((res) => res.json())\n      .then(\n        (resultData) => {\n          setMarkersIsLoaded(true);\n          setMapMarkersData(resultData);\n        },\n        (errorData) => {\n          setMarkersIsLoaded(true);\n          // TODO: Error handling\n          setMarkerError(errorData);\n        },\n      );\n  }, []);\n\n  useMemo(() => {\n    if (markersIsLoaded && !markerError) {\n      setMarkersToRender(\n        mapMarkersData.map((mevoMarker) => (\n          <Marker\n            key={\n              Number(mevoMarker.position.longitude) +\n              Number(mevoMarker.position.latitude)\n            }\n            longitude={Number(mevoMarker.position.longitude)}\n            latitude={Number(mevoMarker.position.latitude)}\n          >\n            <img\n              src={mevoMarker.iconUrl}\n              alt='Mevo car position'\n              className='w-8 h-auto'\n            />\n          </Marker>\n        )),\n      );\n    }\n  }, [markersIsLoaded, markerError, mapMarkersData]);\n\n  return (\n    <div className='App'>\n      <Container>\n        <Navbar />\n        <ReactMapGL\n          latitude={viewport.latitude}\n          longitude={viewport.longitude}\n          zoom={viewport.zoom}\n          bearing={viewport.bearing}\n          pitch={viewport.pitch}\n          minZoom={12}\n          width='100%'\n          height='100%'\n          mapStyle='mapbox://styles/mapbox/streets-v11'\n          onViewportChange={setViewport}\n          mapboxApiAccessToken={MAPBOX_TOKEN}\n        >\n          {zonesToRender}\n          {markersToRender}\n          <NavigationControl {...mapSettings.navigationControl} />\n          <GeolocateControl\n            {...mapSettings.geolocateControl}\n            trackUserLocation\n          />\n        </ReactMapGL>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}